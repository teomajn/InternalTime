(defun plothr (x xd p1 mwi rr avgrr1 avgrr2 tr)
  (let ((xdat (read-list-from-file x))
	(xddat (read-list-from-file xd))
	(p1dat (read-list-from-file p1))
	(mwidat (read-list-from-file mwi))
	(rrdat (read-list-from-file rr))
	(avgrr1dat (read-list-from-file avgrr1))
	(avgrr2dat (read-list-from-file avgrr2))
	(trdat (read-list-from-file tr)))
    (gp-command "reset")
    (gp-command "set multiplot")
    (gp-command "set size 1.0,0.5")
    (gp-command "set origin 0,0.5")
    (gp-command "set xrange [400:425]")
    (plot trdat xddat "with lines" trdat (mapcar #'(lambda (x) (* 50.0 x)) mwidat) "with lines")
    (gp-command "set size 1.0,0.5")
    (gp-command "set origin 0,0.0")
    (gp-command "set yrange [0:200]")
    (plot trdat (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) rrdat) "with lines" trdat (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) avgrr1dat) "with lines" trdat (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) avgrr2dat) "with lines")))

(defun plottest (func1 func1_adjusted func2 func3 func3_adjusted func1.1.rr1 func1.1.avgrr1 func1.1.time func1.2.rr1 func1.2.avgrr1 func1.2.time func3.1.rr1 func3.1.avgrr1 func3.1.time func3.2.rr1 func3.2.avgrr1 func3.2.time)
  (let ((func1 (deinterleave 3 (read-list-from-file func1)))
	(func1_adjusted (deinterleave 3 (read-list-from-file func1_adjusted)))
	(func2 (deinterleave 3 (read-list-from-file func2)))
	(func3 (deinterleave 3 (read-list-from-file func3)))
	(func3_adjusted (deinterleave 3 (read-list-from-file func3_adjusted)))
	(func1.1.rr1 (read-list-from-file func1.1.rr1))
	(func1.1.avgrr1 (read-list-from-file func1.1.avgrr1))
	(func1.1.time (read-list-from-file func1.1.time))
	(func1.2.rr1 (read-list-from-file func1.2.rr1))
	(func1.2.avgrr1 (read-list-from-file func1.2.avgrr1))
	(func1.2.time (read-list-from-file func1.2.time))
	(func3.1.rr1 (read-list-from-file func3.1.rr1))
	(func3.1.avgrr1 (read-list-from-file func3.1.avgrr1))
	(func3.1.time (read-list-from-file func3.1.time))
	(func3.2.rr1 (read-list-from-file func3.2.rr1))
	(func3.2.avgrr1 (read-list-from-file func3.2.avgrr1))
	(func3.2.time (read-list-from-file func3.2.time)))
    (let ((lw 5))
      (labels ((style (title color &key (ls 1))
		 (format nil "with lines title \"~A\" ls ~A lc rgb \"~A\" lw ~A" title ls color lw)))
	(restart-gp)
	;;(gp-set-term-type 'eps)
	(gp-command "set term postscript eps size 13,8 color enhanced rounded font \"Times\" 24")
	;;(gp-command "set multiplot layout 3, 1")
	(mapcar #'(lambda (p v) (gp-command (format nil "set ~A ~A" p v)))
		'("lmargin" "rmargin")
		'(10 3))
	(gp-command "set tmargin 0.5")
	(gp-command "set bmargin 4")
	(gp-command "set xlabel \"time (sec.)\" offset 0,0")
	(gp-command "set ylabel \"tempo (beats per minute)\" offset 1.5,0")
	(gp-command "set xrange [0:250]")
	(gp-command "set yrange [70:220]")
	(gp-set-output-file "/Users/john/Development/Cascade/src/80_180_80-model.eps")
	(plot (car func1) (mapcar #'(lambda (y) (* y 60.0)) (cadr func1)) (style "model" "red"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/80_180_80-run1.eps")
	(plot (car func1) (mapcar #'(lambda (y) (* y 60.0)) (cadr func1)) (style "model" "red")
	      func1.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func1.1.avgrr1) (style "run 1" "green"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/80_180_80-runs1-2.eps")
	(plot (car func1) (mapcar #'(lambda (y) (* y 60.0)) (cadr func1)) (style "model" "red")
	      func1.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func1.1.avgrr1) (style "run 1" "green")
	      func1.2.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func1.2.avgrr1) (style "run 2" "blue"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/80_180_80-runs1-2-adj.eps")
	(plot (car func1) (mapcar #'(lambda (y) (* y 60.0)) (cadr func1)) (style "model" "red")
	      func1.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func1.1.avgrr1) (style "run 1" "green")
	      func1.2.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func1.2.avgrr1) (style "run 2" "blue")
	      (car func1_adjusted) (mapcar #'(lambda (y) (* y 60.0)) (cadr func1_adjusted)) (style "adjusted model" "red" :ls 2))

	(gp-set-output-file "/Users/john/Development/Cascade/src/180_80_180-model.eps")
	(plot (car func3) (mapcar #'(lambda (y) (* y 60.0)) (cadr func3)) (style "model" "red"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/180_80_180-run1.eps")
	(plot (car func3) (mapcar #'(lambda (y) (* y 60.0)) (cadr func3)) (style "model" "red")
	      func3.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func3.1.avgrr1) (style "run 1" "green"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/180_80_180-runs1-2.eps")
	(plot (car func3) (mapcar #'(lambda (y) (* y 60.0)) (cadr func3)) (style "model" "red")
	      func3.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func3.1.avgrr1) (style "run 1" "green")
	      func3.2.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func3.2.avgrr1) (style "run 2" "blue"))
	(gp-set-output-file "/Users/john/Development/Cascade/src/180_80_180-runs1-2-adj.eps")
	(plot (car func3) (mapcar #'(lambda (y) (* y 60.0)) (cadr func3)) (style "model" "red")
	      func3.1.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func3.1.avgrr1) (style "run 1" "green")
	      func3.2.time (mapcar #'(lambda (x) (* (/ 1.0 x) 60.0)) func3.2.avgrr1) (style "run 2" "blue")
	      (car func3_adjusted) (mapcar #'(lambda (y) (* y 60.0)) (cadr func3_adjusted)) (style "adjusted model" "red" :ls 2))))))

;; (plot-osc "test1.osc.lisp" /time/relative /P1/mwi "with lines" /time/relative /rr)
(defun plot-osc (filename addresses)
  (with-open-file (stream filename)
    (when stream
      (lplot
       (labels ((read-bundle (dat)
		   (let ((bndl (read stream nil)))
		    (if (null bndl)
			(reverse (mapcar #'(lambda (l) (if (listp l) (reverse l) l)) dat))
			(read-bundle (labels ((lookup-address (addresses dat1 dat2)
						(if (null addresses)
						    (reverse dat2)
						    (let ((x (cadr (assoc (car addresses) bndl)))
							  (y (cadr (assoc (cadr addresses) bndl))))
						      (if (and (not (null x)) (not (null y)))
							  (if (stringp (third addresses))
							      (lookup-address (cdddr addresses) (cdddr dat1) (cons (cons x (caddr dat1)) (cons (cons y (cadr dat1)) (cons (caddr addresses) dat2))))
							      (lookup-address (cddr addresses) (cddr dat1) (cons (cons x (cadr dat1)) (cons (cons y (car dat1)) dat2))))
							  (if (stringp (third addresses))
							      (lookup-address (cdddr addresses) (cdddr dat1) (cons (caddr dat1) (cons (cadr dat1) (cons (caddr addresses) dat2))))
							      (lookup-address (cddr addresses) (cddr dat1) (cons (cadr dat1) (cons (car dat1) dat2)))))))))
				       (lookup-address addresses dat '())))))))
	 (read-bundle '()))))))

(defun multi-plot-osc (filename addresses)
  (let ((nplots (length addresses)))
    (gp-command "set multiplot")
    (labels ((rec (addresses i)
	       (when (not (null addresses))
		 (gp-command (format nil "set size 1.0,~A" (/ 1.0 nplots)))
		 (gp-command (format nil "set origin 0,~A" (- 1.0 (/ i nplots))))
		 (plot-osc filename (car addresses))
		 (rec (cdr addresses) (1+ i)))))
      (rec addresses 1))))
